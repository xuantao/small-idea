// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define XLUA_EXPORT_EXTERNAL_CLASS_BEGIN(ClassName, __VA_ARGS__) static_assert(std::is_void<_XLUA_SUPER_CLASS(__VA_ARGS__)>::value || std::is_base_of<_XLUA_SUPER_CLASS(__VA_ARGS__), ClassName>::value, "external class is not inherited" ); static_assert(std::is_void<_XLUA_SUPER_CLASS(__VA_ARGS__)>::value || xlua::detail::IsInternal<_XLUA_SUPER_CLASS(__VA_ARGS__)>::value || xlua::detail::IsExternal<_XLUA_SUPER_CLASS(__VA_ARGS__)>::value, "base type is not declare to export to lua" ); namespace { xlua::detail::TypeNode _XLUA_ANONYMOUS([]() -> const xlua::TypeInfo* { return xLuaGetTypeInfo(xlua::Identity<ClassName>()); }); } const xlua::TypeInfo* xLuaGetTypeInfo(xlua::Identity<ClassName>) { using class_type = ClassName; using super_type = _XLUA_SUPER_CLASS(__VA_ARGS__); static const xlua::TypeInfo* s_type_info = nullptr; if (s_type_info) return s_type_info; auto* global = xlua::detail::GlobalVar::GetInstance(); if (global == nullptr) return nullptr; auto* desc = global->AllocType(xlua::TypeCategory::kExternal, xlua::detail::IsWeakObjPtr<ClassName>::value, #ClassName, xlua::detail::GetTypeInfoImpl<super_type>() ); if (desc == nullptr) return nullptr; desc->SetCaster( xlua::detail::MakePtrCaster<ClassName, super_type>() );
